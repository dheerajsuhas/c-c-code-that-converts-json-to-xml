 #include <iostream>
#include <rapidjson/document.h>
#include <rapidjson/prettywriter.h>
#include <rapidjson/stringbuffer.h>
#include <string>

std::string jsonToXml(const rapidjson::Value& value)
{
    rapidjson::StringBuffer buffer;
    rapidjson::PrettyWriter<rapidjson::StringBuffer> writer(buffer);
    
    writer.StartObject();
    for (auto& member : value.GetObject()) {
        writer.Key(member.name.GetString());
        if (member.value.IsObject()) {
            writer.StartObject();
            writer.String("@type");
            writer.String("object");
            writer.String("@value");
            writer.String(jsonToXml(member.value).c_str());
            writer.EndObject();
        }
        else if (member.value.IsArray()) {
            writer.StartObject();
            writer.String("@type");
            writer.String("array");
            writer.String("@value");
            writer.StartArray();
            for (auto& element : member.value.GetArray()) {
                writer.String(jsonToXml(element).c_str());
            }
            writer.EndArray();
            writer.EndObject();
        }
        else {
            writer.String(member.value.GetString());
        }
    }
    writer.EndObject();
    
    return buffer.GetString();
}

int main()
{
    // JSON input
    const char* jsonString = R"({
        "name": "John Smith",
        "age": 30,
        "address": {
            "street": "123 Main St",
            "city": "New York"
        },
        "hobbies": ["reading", "gaming", "sports"]
    })";
    
    rapidjson::Document document;
    document.Parse(jsonString);
    
    if (!document.HasParseError() && document.IsObject()) {
        std::string xmlString = jsonToXml(document);
        std::cout << xmlString << std::endl;
    }
    else {
        std::cerr << "Invalid JSON input" << std::endl;
    }
    
    return 0;
}
